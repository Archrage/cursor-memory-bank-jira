---
description: Visual process map for VAN mode (Index/Entry Point)
globs: van-mode-map.mdc
alwaysApply: false
---
# VAN MODE: INITIALIZATION PROCESS MAP (INDEX)

> **TL;DR:** This is the entry point for VAN mode. It handles initial activation and directs the process to subsequent steps stored in separate files for optimization.

## ðŸš€ VAN MODE ACTIVATION

When the user types "VAN", respond with a confirmation and start the process:

```
User: VAN

Response: OK VAN - Beginning Initialization Process
Loading Platform Detection map...
```

## ðŸ§­ VAN MODE PROCESS FLOW (High Level)

This graph shows the main stages. Each stage is detailed in a separate file loaded sequentially.

```mermaid
graph TD
    Start["VAN Mode Start"] --> AutoSync["Step 1: Auto-Sync Completed Tasks"]
    AutoSync --> TaskSelect["Step 2: Select Task for Initialization"]
    TaskSelect --> Complexity["Step 3: Determine Complexity"]
    Complexity --> SuggestNext["Step 4: Suggest Next Mode (PLAN/IMPLEMENT)"]
    SuggestNext --> CheckArchitecture["Step 5: Check/Create Architecture Document"]
    CheckArchitecture --> End["VAN Mode End"]
```

**Next Step:** Load and process `van-platform-detection.mdc`. 

## DETAILED STEPS

### Step 1: Auto-Sync Completed Tasks

*   **Action**: Read `tasks.md` to identify tasks not marked as locally completed.
*   **Action**: For each such task ID found, call `mcp_mcp-atlassian_jira_get_issue` to check its current status in Jira.
*   **Condition**: If a task status in Jira is 'Done' (or configured equivalent final status) but not in `tasks.md`:
    *   **Action**: Propose an `edit_file` operation on `tasks.md` to update the status for that task ID.
    *   **Action**: Wait for user approval of the `edit_file` operation.
*   **Report**: Briefly report result (e.g., "Statuses synchronized." or "Edits proposed for tasks.md.").

### Step 2: Select Task for Initialization

*   **Action**: Ask user: "Do you have a specific task ID for initialization? If yes, please provide it. Otherwise, I will search for suitable tasks (e.g., in 'Backlog' status)."
*   **Condition**: If user provides an ID:
    *   Store the `issue_key`.
*   **Condition**: If user does not provide ID:
    *   **Action**: Call `mcp_mcp-atlassian_jira_search` with JQL like `status = Backlog AND (assignee = currentUser() OR assignee = EMPTY) ORDER BY updated DESC`, limit 5-10, fields=summary,status.
    *   **Action**: Present the list of found tasks to the user.
    *   **Action**: Ask user to select a task ID from the list.
    *   Store the selected `issue_key`.
*   **Error Handling**: If no task ID is provided or selected, report error and stop.
*   **Report**: Confirm selected task: "Task [issue_key] - [Name] selected."

### Step 3: Determine Complexity

*   **Action**: Load and follow the logic from `.cursor/rules/isolation_rules/Core/complexity-decision-tree.mdc` using the selected task's details (summary, description if available).
*   **Action**: Record the determined Complexity Level (1-4) potentially in `activeContext.md` or as a variable.
*   **Report**: Inform user: "Complexity Level Determined: [Level] - [Description]."

### Step 4: Suggest Next Mode (PLAN/IMPLEMENT)

*   **Condition**: Based on the determined Complexity Level:
    *   If Level 1: Suggest `IMPLEMENT` mode.
    *   If Level 2-4: Suggest `PLAN` mode.
*   **Report**: "Recommended next step: [PLAN/IMPLEMENT] Mode. Enter '[PLAN/IMPLEMENT]' to proceed."

### Step 5: Check/Create Architecture Document
*   **Action**: Check if file `/docs/architecture.md` exists.
*   **Condition**: If file does NOT exist:
    *   **Action**: Propose `edit_file` to create `/docs/architecture.md` with basic template:
        ```markdown
        # Project Architecture

        ## 1. High-Level Overview
        (A brief description of the project's purpose and overall architecture)

        ## 2. Key Components
        (List major components/modules/services and their responsibilities)

        ## 3. Technology Stack
        (List main technologies, frameworks, databases, etc.)

        ## 4. Data Flow
        (Optional: Describe or diagram how data moves through the system)

        ## 5. Design Principles
        (Key architectural principles followed, e.g., SOLID, Microservices, etc.)

        ## 6. Diagrams
        (Placeholder for Mermaid diagrams or links)
        ```
    *   **Report**: "File /docs/architecture.md not found. Proposing to create it with a basic structure."
    *   **Action**: Wait for user approval of the `edit_file` operation.
*   **Condition**: If file exists:
    *   **Report**: "File /docs/architecture.md exists."

### Step 6: VAN Mode End
*   Wait for user command to transition to the next mode. 