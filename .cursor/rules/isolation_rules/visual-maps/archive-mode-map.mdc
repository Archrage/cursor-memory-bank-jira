---
description: 
globs: 
alwaysApply: false
---
---
description: Visual process map for ARCHIVE mode (Task Documentation)
globs: "**/archive*/**", "**/document*/**", "**/complete*/**"
alwaysApply: false
---

# ARCHIVE MODE: TASK DOCUMENTATION PROCESS MAP

> **TL;DR:** This visual map guides the ARCHIVE mode process, focusing on creating comprehensive documentation of the completed task, archiving relevant files, and updating the Memory Bank for future reference.

## üß≠ ARCHIVE MODE PROCESS FLOW

```mermaid
graph TD
    Start["START ARCHIVE MODE"] --> ReadTasks["Read tasks.md<br>reflection.md and<br>progress.md"]
    
    %% Initial Assessment
    ReadTasks --> VerifyReflect{"Reflection<br>Complete?"}
    VerifyReflect -->|"No"| ReturnReflect["Return to<br>REFLECT Mode"]
    VerifyReflect -->|"Yes"| AssessLevel{"Determine<br>Complexity Level"}
    
    %% Level-Based Archiving
    AssessLevel -->|"Level 1"| L1Archive["LEVEL 1 ARCHIVING<br>Level1/archive-minimal.md"]
    AssessLevel -->|"Level 2"| L2Archive["LEVEL 2 ARCHIVING<br>Level2/archive-basic.md"]
    AssessLevel -->|"Level 3"| L3Archive["LEVEL 3 ARCHIVING<br>Level3/archive-standard.md"]
    AssessLevel -->|"Level 4"| L4Archive["LEVEL 4 ARCHIVING<br>Level4/archive-comprehensive.md"]
    
    %% Level 1 Archiving (Minimal)
    L1Archive --> L1Summary["Create Quick<br>Summary"]
    L1Summary --> L1Task["Update<br>tasks.md"]
    L1Task --> L1Complete["Mark Task<br>Complete"]
    
    %% Level 2 Archiving (Basic)
    L2Archive --> L2Summary["Create Basic<br>Archive Document"]
    L2Summary --> L2Doc["Document<br>Changes"]
    L2Doc --> L2Task["Update<br>tasks.md"]
    L2Task --> L2Progress["Update<br>progress.md"]
    L2Progress --> L2Complete["Mark Task<br>Complete"]
    
    %% Level 3-4 Archiving (Comprehensive)
    L3Archive & L4Archive --> L34Summary["Create Comprehensive<br>Archive Document"]
    L34Summary --> L34Doc["Document<br>Implementation"]
    L34Doc --> L34Creative["Archive Creative<br>Phase Documents"]
    L34Creative --> L34Code["Document Code<br>Changes"]
    L34Code --> L34Test["Document<br>Testing"]
    L34Test --> L34Lessons["Summarize<br>Lessons Learned"]
    L34Lessons --> L34Task["Update<br>tasks.md"]
    L34Task --> L34Progress["Update<br>progress.md"]
    L34Progress --> L34System["Update System<br>Documentation"]
    L34System --> L34Complete["Mark Task<br>Complete"]
    
    %% Completion
    L1Complete & L2Complete & L34Complete --> CreateArchive[\"Create Archive<br>Document in<br>docs/archive/\"]

    %% LOCAL DOCS & CONFLUENCE INTEGRATION START
    CreateArchive --> VerifyDocsDir[\"Verify/Create<br>docs/archive/ directory\"]
    VerifyDocsDir --> WriteLocalDoc[\"Write Summary<br>to docs/archive/\"]
    WriteLocalDoc --> UpdateConfluence[\"Update/Create<br>Confluence Page\"]
    UpdateConfluence --> UpdateActive[\"Update<br>activeContext.md\"]
    %% LOCAL DOCS & CONFLUENCE INTEGRATION END

    %% DEVOPS INTEGRATION START
    UpdateActive --> GitLabTag[\"Create Release<br>Tag in GitLab\"]
    GitLabTag --> VercelCheck[\"Check Vercel<br>Deployment (Optional)\"]
    VercelCheck --> Reset[\"Reset for<br>Next Task\"]
    %% DEVOPS INTEGRATION END

    %% Previously: UpdateActive --> Reset[\"Reset for<br>Next Task\"]

    %% Node Styles
    style CreateArchive fill:#87CEEB,stroke:#4682B4,color:black
    style VerifyDocsDir fill:#DAA520,stroke:#B8860B,color:black
    style WriteLocalDoc fill:#90EE90,stroke:#3CB371,color:black
    style UpdateConfluence fill:#2dce89,stroke:#24a46d,color:white
    style UpdateActive fill:#FFD700,stroke:#B8860B,color:black
    style GitLabTag fill:#6f42c1,stroke:#5a32a3,color:white
    style VercelCheck fill:#ee5253,stroke:#c0392b,color:white
    style Reset fill:#FFA07A,stroke:#CD5C5C,color:black
```

## üìã ARCHIVE DOCUMENT STRUCTURE

The archive document should follow this structured format:

```mermaid
graph TD
    subgraph "Archive Document Structure"
        Header["# TASK ARCHIVE: [Task Name]"]
        Meta["## METADATA<br>Task info, dates, complexity"]
        Summary["## SUMMARY<br>Brief overview of the task"]
        Requirements["## REQUIREMENTS<br>What the task needed to accomplish"]
        Implementation["## IMPLEMENTATION<br>How the task was implemented"]
        Testing["## TESTING<br>How the solution was verified"]
        Lessons["## LESSONS LEARNED<br>Key takeaways from the task"]
        Refs["## REFERENCES<br>Links to related documents"]
    end
    
    Header --> Meta --> Summary --> Requirements --> Implementation --> Testing --> Lessons --> Refs
```

## üìä REQUIRED FILE STATE VERIFICATION

Before archiving can begin, verify file state:

```mermaid
graph TD
    Start["File State<br>Verification"] --> CheckTasks{"tasks.md has<br>reflection<br>complete?"}
    
    CheckTasks -->|"No"| ErrorReflect["ERROR:<br>Return to REFLECT Mode"]
    CheckTasks -->|"Yes"| CheckReflection{"reflection.md<br>exists?"}
    
    CheckReflection -->|"No"| ErrorCreate["ERROR:<br>Create reflection.md first"]
    CheckReflection -->|"Yes"| CheckProgress{"progress.md<br>updated?"}
    
    CheckProgress -->|"No"| ErrorProgress["ERROR:<br>Update progress.md first"]
    CheckProgress -->|"Yes"| ReadyArchive["Ready for<br>Archiving"]
```

## üîç ARCHIVE TYPES BY COMPLEXITY

```mermaid
graph TD
    subgraph "Level 1: Minimal Archive"
        L1A["Basic Bug<br>Description"]
        L1B["Solution<br>Summary"]
        L1C["Affected<br>Files"]
    end
    
    subgraph "Level 2: Basic Archive"
        L2A["Enhancement<br>Description"]
        L2B["Implementation<br>Summary"]
        L2C["Testing<br>Results"]
        L2D["Lessons<br>Learned"]
    end
    
    subgraph "Level 3-4: Comprehensive Archive"
        L3A["Detailed<br>Requirements"]
        L3B["Architecture/<br>Design Decisions"]
        L3C["Implementation<br>Details"]
        L3D["Testing<br>Strategy"]
        L3E["Performance<br>Considerations"]
        L3F["Future<br>Enhancements"]
        L3G["Cross-References<br>to Other Systems"]
    end
    
    L1A --> L1B --> L1C
    
    L2A --> L2B --> L2C --> L2D
    
    L3A --> L3B --> L3C --> L3D --> L3E --> L3F --> L3G
```

## üìù ARCHIVE DOCUMENT TEMPLATES

### Level 1 (Minimal) Archive
```
# Bug Fix Archive: [Bug Name]

## Date
[Date of fix]

## Summary
[Brief description of the bug and solution]

## Implementation
[Description of the fix implemented]

## Files Changed
- [File 1]
- [File 2]
```

### Levels 2-4 (Comprehensive) Archive
```
# Task Archive: [Task Name]

## Metadata
- **Complexity**: Level [2/3/4]
- **Type**: [Enhancement/Feature/System]
- **Date Completed**: [Date]
- **Related Tasks**: [Related task references]

## Summary
[Comprehensive summary of the task]

## Requirements
- [Requirement 1]
- [Requirement 2]
- [Requirement 3]

## Implementation
### Approach
[Description of implementation approach]

### Key Components
- [Component 1]: [Description]
- [Component 2]: [Description]

### Files Changed
- [File 1]: [Description of changes]
- [File 2]: [Description of changes]

## Testing
- [Test 1]: [Result]
- [Test 2]: [Result]

## Lessons Learned
- [Lesson 1]
- [Lesson 2]
- [Lesson 3]

## Future Considerations
- [Future enhancement 1]
- [Future enhancement 2]

## References
- [Link to reflection document]
- [Link to creative phase documents]
- [Other relevant references]
```

## üìã ARCHIVE LOCATION AND NAMING

Archive documents should be organized following this pattern:

```mermaid
graph TD
    subgraph "Archive Structure"
        Root["docs/archive/"]
        Tasks["tasks/"]
        Features["features/"]
        Systems["systems/"]
        
        Root --> Tasks
        Root --> Features
        Root --> Systems
        
        Tasks --> Bug["bug-fix-name-YYYYMMDD.md"]
        Tasks --> Enhancement["enhancement-name-YYYYMMDD.md"]
        Features --> Feature["feature-name-YYYYMMDD.md"]
        Systems --> System["system-name-YYYYMMDD.md"]
    end
```

## üìä TASKS.MD FINAL UPDATE

When archiving is complete, update tasks.md with:

```
## Status
- [x] Initialization complete
- [x] Planning complete
[For Level 3-4:]
- [x] Creative phases complete
- [x] Implementation complete
- [x] Reflection complete
- [x] Archiving complete

## Archive
- **Date**: [Completion date]
- **Archive Document**: [Link to archive document]
- **Status**: COMPLETED
```

## üìã ARCHIVE VERIFICATION CHECKLIST

```
‚úì ARCHIVE VERIFICATION
- Reflection document reviewed? [YES/NO]
- Archive document created with all sections? [YES/NO]
- Archive document placed in correct location (docs/archive/)? [YES/NO]
- **Local summary file created in docs/archive/? [YES/NO]**
- **Confluence page created/updated in configured space? [YES/NO]**
- tasks.md marked as completed? [YES/NO]
- progress.md updated with archive reference? [YES/NO]
- activeContext.md updated for next task? [YES/NO]
- Creative phase documents archived (Level 3-4)? [YES/NO/NA]
- **Release tag created in GitLab? [YES/NO]**
- **Vercel deployment verified (if applicable)? [YES/NO/NA]**

‚Üí If all YES: Archiving complete - Memory Bank reset for next task
‚Üí If any NO: Complete missing archive elements
```

## üìã TASK COMPLETION NOTIFICATION

- **Update Confluence Page**:
    - **Configuration Reading**:
        - **Action**: Read the `integration_config.md` file to get Confluence configuration.
        - **Data**: Extract `Space Key` for Confluence.
    - **Action**: Read the generated archive summary.
    - **Action**: Call `mcp_mcp-atlassian_confluence_create_page` (or potentially `update_page` if a standard page per project exists).
    - **Parameters**:
        - `space_key`: Space key from configuration
        - `title`: "Task Summary: $PROJECT_KEY-XXX - [Task Title]"
        - `content`: Markdown summary content.
        - `parent_id`: (Optional)
    - **Error Handling**: If MCP call fails, report error, try again once. If it fails again, report error and ask user how to proceed.

- **Create GitLab Release Tag**:
    - **Action**: Ask user: "Now that the task is archived, we should create a release tag in GitLab. Would you like to use a specific version for this tag? Default format is v1.x.x."
    - **Action**: Based on user response, propose appropriate `run_terminal_cmd` for:
        - `python devops-tools/gitlab/gitlab_tools.py create-tag --name v1.X.Y --message "Task $PROJECT_KEY-XXX completed: Brief description"`
    - **Action**: Wait for approval and check output for success/failure indication.
    - **Error Handling**: If tag creation fails, report the error and ask if to try again or skip.

- **Verify Vercel Deployment (Optional)**:
    - **Action**: Ask user: "Do you use Vercel for deployments? Would you like to verify the production deployment is up to date?"
    - **Condition**: If user agrees:
        - **Action**: Propose `run_terminal_cmd` command: `python devops-tools/vercel/vercel_tools.py status --prod`
        - **Action**: Wait for approval.
        - **Action**: Based on result, ask: "Do you want to trigger a new production deployment on Vercel?"
        - **Condition**: If user agrees:
            - **Action**: Propose `run_terminal_cmd` command: `python devops-tools/vercel/vercel_tools.py deploy --prod`
            - **Action**: Wait for approval and check output.

Then show the final notification:

```
## TASK ARCHIVED

‚úÖ Archive document created in docs/archive/
‚úÖ Local summary file saved in docs/archive/
‚úÖ Confluence page created/updated in configured space
‚úÖ Release tag created in GitLab repository
‚úÖ Vercel deployment verified (if applicable)
‚úÖ All task documentation preserved
‚úÖ Memory Bank updated with references
‚úÖ Task marked as COMPLETED in tasks.md

‚Üí Memory Bank is ready for the next task
‚Üí To start a new task, use VAN MODE
```

*Note for AI: Remember the MCP error handling rules (retry once) and deletion of temporary files if they were used.*