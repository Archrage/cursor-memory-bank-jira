---
description: Visual process map for CREATIVE mode (Design Decisions)
globs: "**/creative*/**", "**/design*/**", "**/decision*/**"
alwaysApply: false
---
# CREATIVE MODE: DESIGN PROCESS MAP

> **TL;DR:** This visual map guides the CREATIVE mode process, focusing on structured design decision-making for components that require deeper exploration before implementation.

## üß≠ CREATIVE MODE PROCESS FLOW

```mermaid
graph TD
    Start["CREATIVE Mode Start"] --> AutoSync["Step 1: Auto-Sync Completed Tasks"]
    AutoSync --> TaskSelect["Step 2: Select Task for Creative Work"]
    TaskSelect --> CheckName["Step 3: Check Name & Propose Fixes"]
    CheckName --> CheckStatusAssignee["Step 4: Check Status/Assignee & Propose Updates"]
    CheckStatusAssignee --> UpdateTasksMD["Step 5: Propose tasks.md Update"]
    UpdateTasksMD --> GitCheck["Step 6: Check Git Branch"]
    GitCheck --> CreativeWork["Step 7: Execute Creative Design Process"]
    CreativeWork --> SuggestNext["Step 8: Suggest Next Mode (IMPLEMENT)"]
    SuggestNext --> End["CREATIVE Mode End"]
```

## üìã CREATIVE PHASE DOCUMENT FORMAT

Each creative phase should produce a document with this structure:

```mermaid
graph TD
    subgraph "Creative Phase Document"
        Header["üé® CREATIVE PHASE: [TYPE]"]
        Problem["PROBLEM STATEMENT<br>Clear definition of the problem"]
        Options["OPTIONS ANALYSIS<br>Multiple approaches considered"]
        Pros["PROS & CONS<br>Tradeoffs for each option"]
        Decision["DECISION<br>Selected approach + rationale"]
        Impl["IMPLEMENTATION PLAN<br>Steps to implement the decision"]
        Diagram["VISUALIZATION<br>Diagrams of the solution"]
    end
    
    Header --> Problem --> Options --> Pros --> Decision --> Impl --> Diagram
```

## üîç CREATIVE TYPES AND APPROACHES

```mermaid
graph TD
    subgraph "UI/UX Design"
        UI1["User Flow<br>Analysis"]
        UI2["Component<br>Hierarchy"]
        UI3["Interaction<br>Patterns"]
        UI4["Visual Design<br>Principles"]
    end
    
    subgraph "Architecture Design"
        A1["Component<br>Structure"]
        A2["Data Flow<br>Patterns"]
        A3["Interface<br>Design"]
        A4["System<br>Integration"]
    end
    
    subgraph "Data Model Design"
        D1["Entity<br>Relationships"]
        D2["Schema<br>Design"]
        D3["Validation<br>Rules"]
        D4["Query<br>Optimization"]
    end
    
    subgraph "Algorithm Design"
        AL1["Complexity<br>Analysis"]
        AL2["Efficiency<br>Optimization"]
        AL3["Edge Case<br>Handling"]
        AL4["Scaling<br>Considerations"]
    end
```

## üìä REQUIRED FILE STATE VERIFICATION

Before creative phase work can begin, verify file state:

```mermaid
graph TD
    Start["File State<br>Verification"] --> CheckTasks{"tasks.md has<br>planning complete?"}
    
    CheckTasks -->|"No"| ErrorPlan["ERROR:<br>Return to PLAN Mode"]
    CheckTasks -->|"Yes"| CheckCreative{"Creative phases<br>identified?"}
    
    CheckCreative -->|"No"| ErrorCreative["ERROR:<br>Return to PLAN Mode"]
    CheckCreative -->|"Yes"| ReadyCreative["Ready for<br>Creative Phase"]
```

## üìã OPTIONS ANALYSIS TEMPLATE

For each creative phase, analyze multiple options:

```
## OPTIONS ANALYSIS

### Option 1: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]

### Option 2: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]

### Option 3: [Name]
**Description**: [Brief description]
**Pros**:
- [Pro 1]
- [Pro 2]
**Cons**:
- [Con 1]
- [Con 2]
**Complexity**: [Low/Medium/High]
**Implementation Time**: [Estimate]
```

## üé® CREATIVE PHASE MARKERS

Use these visual markers for creative phases:

```
üé®üé®üé® ENTERING CREATIVE PHASE: [TYPE] üé®üé®üé®

[Creative phase content]

üé® CREATIVE CHECKPOINT: [Milestone]

[Additional content]

üé®üé®üé® EXITING CREATIVE PHASE - DECISION MADE üé®üé®üé®
```

## üìä CREATIVE PHASE VERIFICATION CHECKLIST

```
‚úì CREATIVE PHASE VERIFICATION
- Problem clearly defined? [YES/NO]
- Multiple options considered (3+)? [YES/NO]
- Pros/cons documented for each option? [YES/NO]
- Decision made with clear rationale? [YES/NO]
- Implementation plan included? [YES/NO]
- Visualization/diagrams created? [YES/NO]
- tasks.md updated with decision? [YES/NO]

‚Üí If all YES: Creative phase complete
‚Üí If any NO: Complete missing elements
```

## üîÑ MODE TRANSITION NOTIFICATION

When all creative phases are complete, notify user with:

```
## CREATIVE PHASES COMPLETE

‚úÖ All required design decisions made
‚úÖ Creative phase documents created
‚úÖ tasks.md updated with decisions
‚úÖ Implementation plan updated

‚Üí NEXT RECOMMENDED MODE: IMPLEMENT MODE
```

## üé® DETAILED CREATIVE WORKFLOW STEPS

### Step 1: Auto-Sync Completed Tasks
*   *(Logic similar to Step 1 in VAN Mode)*

### Step 2: Select Task for Creative Work
*   **Action**: Ask user: "Do you have a specific task ID for creative work? Otherwise, I will search for tasks in 'To Do'/'In Progress' status."
*   **Condition**: If user provides an ID: Store `issue_key`.
*   **Condition**: If user does not provide ID:
    *   **Action**: Call `mcp_mcp-atlassian_jira_search` with JQL like `status IN ('To Do', 'In Development') AND assignee = currentUser() ORDER BY updated DESC`, limit 5-10, fields=summary,status.
    *   **Action**: Present list to user.
    *   **Action**: Ask user to select task ID.
    *   Store selected `issue_key`.
*   **Error Handling**: If no task selected, stop.
*   **Report**: Confirm task: "Task [issue_key] - [Name] selected."

### Step 3: Check Name & Propose Fixes
*   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `issue_key` (fields: summary).
*   **Action**: Compare Jira summary with name in `tasks.md`.
*   **Condition**: If discrepancy:
    *   **Action**: Propose `edit_file` for `tasks.md`.
    *   **Action**: Wait for approval.

### Step 4: Check Status/Assignee & Propose Updates
*   **Action**: Call `mcp_mcp-atlassian_jira_get_issue` for `issue_key` (fields: status, assignee).
*   **Action**: Check status. Expected: 'To Do' or 'In Development'.
*   **Action**: Check assignee. Expected: `currentUser()`.
*   **Condition**: If status is wrong (e.g., 'Backlog'):
    *   **Action**: Propose `jira_transition_issue` to 'To Do'/'In Development'.
*   **Condition**: If assignee is wrong/empty:
    *   **Action**: Propose `jira_update_issue` to set assignee to `currentUser()`.
*   **Condition**: If status is 'In Progress' and assignee is someone else:
    *   **Action**: Report **STOP** (Potential conflict). Stop process.
*   **Action**: Wait for user approval of any proposed MCP actions.

### Step 5: Propose tasks.md Update
*   **Condition**: If Step 4 resulted in successful Jira update(s):
    *   **Action**: Propose `edit_file` on `tasks.md` to update status/assignee for the `issue_key`.
    *   **Action**: Wait for approval.

### Step 6: Check Git Branch
*   **Action**: Ask user: "Are you in a separate Git branch for this task ([issue_key])? If not, it's recommended to create it now (`git checkout -b ...`)."
*   **(Optional Action):** Propose `run_terminal_cmd` for `git checkout -b feature/[issue_key]` if user agrees.

### Step 7: Execute Creative Design Process
*   **Action**: Load and follow the logic from relevant creative phase rules (e.g., `creative-phase-architecture.mdc`).
*   **Action**: Generate design documentation (e.g., in `creative-[issue_key].md`).
*   **Instruction**: Ensure process follows structured thinking (options, pros/cons, rationale).
*   **Report**: Inform user on progress and completion of design.

### Step 8: Suggest Next Mode (IMPLEMENT)
*   **Action**: Update `tasks.md` (via proposed `edit_file`) or `activeContext.md` to indicate creative phase completion.
*   **Reminder**: "If **significant architectural decisions** were made during the CREATIVE phase, don't forget to update the /docs/architecture.md document. You can ask me to help with this."
*   **Report**: "Design phase complete. Recommended next step: IMPLEMENT Mode. Enter 'IMPLEMENT' to proceed."

### Step 9: CREATIVE Mode End
*   Wait for user command.


*Note for AI: Remember the MCP error handling rules (retry once) and deletion of temporary files if they were used.* 