---
description: 
globs: 
alwaysApply: false
---

```
‚úì PLAN COMPLETE
Jira Story created (linked to Epic if specified) and recorded in tasks.md.
Detailed plan finalized. Ready for CREATIVE mode.
Type 'CREATIVE' to begin design decisions.
```

// ... existing code ...
## üìã DETAILED PLANNING WORKFLOW STEPS

// ... existing steps ...

### Step 6: Finalize Plan and Prepare for Transition

- **Configuration Reading**:
    - **Action**: Read the `integration_config.md` file to get Jira configuration.
    - **Data**: Extract `Project Key`, `Default Issue Type`.

- **Review**: Ensure all requirements are captured and the plan is complete.
- **Verify**: Confirm readiness to move to the CREATIVE phase.

- **Gather Jira Components/Labels**:
    - **Action**: Ask the user:
        - "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ **—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ** –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ Jira (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
        - "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ **—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ** –º–µ—Ç–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ Jira (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"
    - **Input**: User provides components, labels.
    - *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –ò–ò: –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã/–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.*

- **Handle Epic Linking**:
    - **Action**: Ask the user: "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω–æ–π —Ü–µ–ª–∏ –∏–ª–∏ –Ω–∞–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π (–≠–ø–∏–∫–∞)? (–î–∞/–ù–µ—Ç)"
    - **If Yes**:
        - Ask: "–û–ø–∏—à–∏—Ç–µ —ç—Ç—É —Ü–µ–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."
        - Search: Call `mcp_mcp-atlassian_jira_search` with `jql="project = $PROJECT_KEY AND issuetype = Epic AND summary ~ '\"user keywords\"'"`, `limit=5`, `fields="summary"`, where `$PROJECT_KEY` is from configuration.
        - Ask: Present search results (or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≠–ø–∏–∫–æ–≤."). "–ö–∞–∫–æ–π –∏–∑ –Ω–∏—Ö –ø–æ–¥—Ö–æ–¥–∏—Ç? –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, $PROJECT_KEY-10), –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≠–ø–∏–∫', –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        - **If user provides key**: Store the key for `parent` field.
        - **If user says '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≠–ø–∏–∫'**: Ask for Epic Name. Call `mcp_mcp-atlassian_jira_create_issue` with `project_key` from configuration, `issue_type="Epic"`, `summary="User's Epic Name"`, `assignee="currentUser()"`. Get the new Epic key. Store it for `parent` field.
        - **If user says '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' or provides no valid input**: Set Epic key to `null`.
    - **If No**: Set Epic key to `null`.

- **Jira Story Creation**:
    - **Action**: Call `mcp_mcp-atlassian_jira_create_issue`.
    - **Parameters**:
        - `project_key`: From configuration file
        - `issue_type`: From configuration file (Default: "Story")
        - `summary`: Extract from the main task title.
        - `description`: Extract detailed plan/description.
        - `assignee`: "currentUser()"
        - `components`: User-provided components string.
        - `additional_fields`: Construct JSON string. Always include `"labels": ["label1", "label2", ...]`. If an Epic key was determined above (not `null`), also include `"parent": {"key": "EPIC_KEY_HERE"}`.
    - **Error Handling**: Retry once on MCP failure, then report and ask user.
    - **Output**: Jira Issue Key (e.g., `$PROJECT_KEY-123`).

- **Update `tasks.md`**:
    - **Action**: Append the retrieved Jira Issue Key `[Jira: $PROJECT_KEY-123]`.

- **Transition**: Signal completion and suggest CREATIVE mode.

```

// ... existing code ...



